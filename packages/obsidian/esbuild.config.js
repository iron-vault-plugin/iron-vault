import { typecheckPlugin } from "@jgoz/esbuild-plugin-typecheck";
import builtins from "builtin-modules";
import console from "console";
import esbuild from "esbuild";
import { copy } from "esbuild-plugin-copy";
import inlineWorkerPlugin from "esbuild-plugin-inline-worker";
import process from "process";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const watch = !prod && process.argv[2] !== "nowatch";

const features = {
  indexedDb: prod ? false : true,
};

features.indexedDb = false;

console.log(
  `Building Iron Vault plugin for Obsidian with features: ${JSON.stringify(features)}`,
);

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/index.ts"],
  bundle: true,
  loader: {
    ".png": "binary",
    ".jpg": "binary",
    ".wasm": "binary",
  },
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2023",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "../../main.js",
  conditions: prod ? [] : ["development"],
  define: {
    ENABLE_INDEXEDDB: features.indexedDb.toString(),
  },
  plugins: [
    inlineWorkerPlugin({
      // sourcemap: prod ? false : "inline", // inline workers with sourcemaps in dev mode}),
      treeShaking: true,
      target: "es2023",
      conditions: ["worker", ...(prod ? [] : ["development"])],
      define: {
        ENABLE_INDEXEDDB: features.indexedDb.toString(),
      },
    }),
    typecheckPlugin({ watch }),
    copy({
      resolveFrom: "out",
      assets: [
        {
          from: ["../../manifest.json"],
          to: [
            "./test-vault/.obsidian/plugins/iron-vault/manifest.json",
            "./docs/.obsidian/plugins/iron-vault/manifest.json",
          ],
        },
        {
          from: ["../../.hotreload"],
          to: [
            "./test-vault/.obsidian/plugins/iron-vault/",
            "./docs/.obsidian/plugins/iron-vault/",
          ],
        },
        {
          from: ["../../main.js"],
          to: [
            "./docs/.obsidian/plugins/iron-vault/main.js",
            "./test-vault/.obsidian/plugins/iron-vault/main.js",
          ],
        },
      ],
      watch,
    }),
  ],
});

const cssCtx = await esbuild.context({
  entryPoints: ["src/styles.css"],
  bundle: true,
  sourcemap: prod ? false : "inline",
  outfile: "../../styles.css",
  loader: {
    ".svg": "dataurl",
  },
  target: "chrome120",
  plugins: [
    copy({
      resolveFrom: "out",
      assets: [
        {
          from: ["../../styles.css"],
          to: [
            "./test-vault/.obsidian/plugins/iron-vault/styles.css",
            "./docs/.obsidian/plugins/iron-vault/styles.css",
          ],
        },
      ],
      watch,
    }),
  ],
});

if (!watch) {
  await Promise.all([context.rebuild(), cssCtx.rebuild()]);
  process.exit(0);
} else {
  await Promise.all([context.watch(), cssCtx.watch()]);
}
